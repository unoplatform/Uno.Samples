parameters:
- name: path
  type: string
  default: ''

steps:
- checkout: self
  clean: 'true'

- powershell: |
      Write-Host "${{ parameters.path }}"

      if($env:System_PullRequest_TargetBranch -eq $null) { $TargetBranch = "master" } else { $TargetBranch = $env:System_PullRequest_TargetBranch; }

      $solutionPath=[System.IO.Path]::GetDirectoryName("${{ parameters.path }}");
      Write-Host "$solutionPath"

      git diff --quiet HEAD "origin/$TargetBranch" -- "$solutionPath"

      # Only build if there a change in the solution path for the current PR, if we're not in a PR
      if( ("$env:System_PullRequest_PullRequestId" -eq '') -or ($global:LASTEXITCODE -ne 0)) {
        Write-Host "##vso[task.setvariable variable=buildSample]false"
      }  
  displayName: Check Build

- ${{ if ($(buildSample) -eq true) }}:
  - template: build/templates/dotnet-install-windows.yml

- powershell: |
      & choco install vswhere
      $msbuildpath=(vswhere -latest -requires Microsoft.Component.MSBuild -find MSBuild\**\Bin\MSBuild.exe -nologo)

      echo "##vso[task.setvariable variable=msbuildpath]$msbuildpath"
  displayName: Set MSBUILDPATH

- powershell: |
      Set-PSDebug -Trace 1
      
      Write-Host "${{ parameters.path }}"

      if($(buildSample) -eq true)) {
        
        & $env:msbuildpath "${{ parameters.path }}" /r /p:Configuration=Release /p:WasmShellMonoRuntimeExecutionMode=Interpreter /p:AotAssemblies=false /p:PublishTrimmed=false /p:WasmShellILLinkerEnabled=false /ds ;
        
        if (($lastexitcode -ne 0)) {
          exit $lastexitcode
        }

        # Clean the whole tree after every build to avoid disk space issues
        git clean -fdx
      }    
  displayName: Build Matrix Samples
